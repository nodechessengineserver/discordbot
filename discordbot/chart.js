// system
const pimg = require("pureimage")
const fs = require("fs")

// local
const GLOBALS = require("./globals")

function autoGenerateData(){
    let magN=Math.floor(Math.random()*4)+1
    let mag=Math.pow(10,magN)
    let n=Math.floor(Math.random()*100)    
    let data=[]
    let y=(Math.random()+5)*mag
    for(let i=0;i<n;i++){
        y=y+(Math.random()-0.5)*mag/5
        data[i]=y    
    }
    return data
}

function createChart(blob,callback,errcallback){
    var fnt = pimg.registerFont(`${__dirname}/../public/fonts/timesbd.ttf`,'Times Bold');
    fnt.load(() => {
        createChartInner(blob,callback,errcallback)        
    });
}

function createChartInner(blob,callback,errcallback){
    if(blob==undefined) blob={}
    let name=blob.name||"chart"
    let ext=blob.ext||"png"    
    let CHART_WIDTH=blob.CHART_WIDTH||600
    let CHART_HEIGHT=blob.CHART_HEIGHT||300
    let MARGIN_TOP=blob.MARGIN_TOP||30
    let MARGIN_LEFT=blob.MARGIN_LEFT||80
    let TEXT_MARGIN_LEFT=blob.TEXT_MARGIN_LEFT||5
    let MARGIN_RIGHT=blob.MARGIN_RIGHT||20
    let MARGIN_BOTTON=blob.MARGIN_BOTTON||20
    let data=blob.data
    if(data==undefined) data=autoGenerateData()
    let TOTAL_CHART_WIDTH=MARGIN_LEFT+CHART_WIDTH+MARGIN_RIGHT
    let TOTAL_CHART_HEIGHT=MARGIN_TOP+CHART_HEIGHT+MARGIN_BOTTON
    let LINE_WIDTH=blob.LINE_WIDTH==undefined?2:blob.LINE_WIDTH
    let BCKG_COLOR=blob.BCKG_COLOR||'#3f3f3f'
    let PLOT_COLOR=blob.PLOT_COLOR||'#ffff00'
    let MOVING_AVERAGE_COLOR=blob.MOVING_AVERAGE_COLOR||'#ff0000'
    let GRID_COLOR=blob.GRID_COLOR||'#7f7fff'
    let FONT_COLOR=blob.FONT_COLOR||'#00ff00'
    let MOVING_AVERAGE=blob.MOVING_AVERAGE
    let MOVING_AVERAGE_FRONT=blob.MOVING_AVERAGE_FRONT
    let FOLDER=blob.FOLDER||"charts"

    let img=pimg.make(TOTAL_CHART_WIDTH,TOTAL_CHART_HEIGHT)
    var ctx = img.getContext('2d');        

    ctx.fillStyle=BCKG_COLOR    

    ctx.fillRect(0,0,TOTAL_CHART_WIDTH,TOTAL_CHART_HEIGHT)

    if(data.length>1){        
        data.reverse()
        let MAX_Y=Math.max.apply(null,data)
        let MIN_Y=Math.min.apply(null,data)        

        let MAX_ABS=Math.max(Math.abs(MIN_Y),Math.abs(MAX_Y))

        if(MAX_ABS>0){
        let magN=Math.floor(Math.log10(MAX_ABS))-1
        let mag=Math.pow(10,magN)

        MIN_Y_J=Math.floor(MIN_Y/mag)
        MAX_Y_J=Math.floor(MAX_Y/mag)+1
        
        MIN_Y=MIN_Y_J*mag
        MAX_Y=MAX_Y_J*mag

        let Y_RANGE=MAX_Y-MIN_Y

        let NUM_LINES=Math.round(Y_RANGE/mag)

        let MOD_LINE=Math.max(Math.floor(NUM_LINES/5),1)
        
        let Y_SCALE=CHART_HEIGHT/Y_RANGE
        let X_SCALE=CHART_WIDTH/(data.length-1)

        function y2c(y){return MARGIN_TOP+CHART_HEIGHT-(y-MIN_Y)*Y_SCALE}
        function x2c(x){return MARGIN_LEFT+x*X_SCALE}   
        
        ctx.strokeStyle=GRID_COLOR
        ctx.font = "25pt 'Times Bold'";
        ctx.fillStyle=FONT_COLOR
        for(let j=MIN_Y_J;j<MAX_Y_J;j++){
            if((j%MOD_LINE)==0){
                let y=j*mag
                let yc=y2c(y)
                ctx.beginPath();
                ctx.moveTo(MARGIN_LEFT, yc);
                ctx.lineTo(MARGIN_LEFT+CHART_WIDTH, yc);
                ctx.stroke();       
                
                ctx.fillText(""+y.toLocaleString(), TEXT_MARGIN_LEFT, yc);
            }
        }

        function drawLine(cx0,cy0,cx1,cy1){            
            for(let jx=-LINE_WIDTH;jx<=LINE_WIDTH;jx++)
            for(let jy=-LINE_WIDTH;jy<=LINE_WIDTH;jy++){                                
                ctx.beginPath();
                ctx.moveTo(cx0+jx, cy0+jy);
                ctx.lineTo(cx1+jx, cy1+jy);
                ctx.stroke();       
            }
        }
        
        for(let i=1;i<data.length;i++){                
            let cx0=x2c(i-1)
            let cx1=x2c(i)

            function drawData(){
                let cy0=y2c(data[i-1])
                let cy1=y2c(data[i])
                ctx.strokeStyle=PLOT_COLOR
                drawLine(cx0,cy0,cx1,cy1)
            }

            function drawMovingAverage(){
                if(MOVING_AVERAGE==undefined) return
                if(i<MOVING_AVERAGE) return
                let sumPrev=data.slice(i-MOVING_AVERAGE,i).reduce((a,b)=>a+b)
                let sumCurr=data.slice(i+1-MOVING_AVERAGE,i+1).reduce((a,b)=>a+b)                      
                let avgPrev=sumPrev/MOVING_AVERAGE
                let avgCurr=sumCurr/MOVING_AVERAGE
                let cy0=y2c(avgPrev)
                let cy1=y2c(avgCurr)                
                ctx.strokeStyle=MOVING_AVERAGE_COLOR                
                drawLine(cx0,cy0,cx1,cy1)
            }

            if(MOVING_AVERAGE_FRONT){                
                drawData()
                drawMovingAverage()
            }else{
                drawMovingAverage()
                drawData()
            }            
        }
        }
    }

    pimg.encodePNGToStream(img, fs.createWriteStream(`${__dirname}/../public/images/${FOLDER}/${name}.${ext}`)).then(() => {
        console.log(`wrote out the png file to ${name}.${ext}`);        
        if(callback!=undefined) callback()
    }).catch(e=>{
        console.log(GLOBALS.handledError(e));
        if(errcallback!=undefined) errcallback()
    });
}

//createChart()

////////////////////////////////////////
// Exports

module.exports.createChart=createChart

////////////////////////////////////////